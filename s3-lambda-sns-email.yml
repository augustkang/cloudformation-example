# S3, Lambda, SNS integrated Stack (Optional : Webhook)
# Flow :
# 1. S3 PutObject event -> S3 notification
# 2. S3 Notification invokes Lambda
# 3. Lambda gets notification event and write Email content like "Some object created"
# 4. Then Lambda push message to SNS Topic
#    (Optional) Lambda send request to Microsoft Teams Webhook
# 5. SNS Delivers Email to Email endpoint

# If you want to add Microsoft Teams Webhook, uncomment lines in Lambda
# You should put Webhook URL in Lambda Environment Variable and Edit teams message format as per your preference

# Some Resources have creation order(DependsOn) due to circular reference between S3 Bucket and Lambda related resources
# Creation order : IAM Role(for Lambda) -> Lambda Function -> Lambda Permission(allow s3 to invoke lambda) -> S3 Bucket

# FYI : Regarding IAM Permission in Same account environment
# It's not necessary to have both Topic Policy and IAM Role allow rule to publish to SNS Topic
# Allow in IAM Role only or Allow only in SNS Topic Policy will also work.

AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  BUCKETNAME: # YOU SHOULD put BucketName you want to create for this parameter while creating CloudFormation Stack
    Type: String
    AllowedPattern: ".+"
  Mail: # YOU SHOULD type your email address to get notification while creating CloudFormation Stack
    Type: String
    AllowedPattern: ".+"
Resources:
  MyBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BUCKETNAME
      NotificationConfiguration:
        LambdaConfigurations:
        - Event: s3:ObjectCreated:*
          Function: !GetAtt MyLambdaFunction.Arn
    DependsOn: MyLambdaPermission

  MySNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: MyTopic

  MySNSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !Ref Mail
      Protocol: email
      TopicArn: !Ref MySNSTopic
    
  MySNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
      - !Ref MySNSTopic
      PolicyDocument:
        Statement:
        - Sid: "Allow Publish from lambda"
          Effect: "Allow"
          Principal:
            AWS:
            - !GetAtt MyLambdaRole.Arn
          Action: ["sns:Publish"]
          Resource:
          - !Ref MySNSTopic

  MyLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub arn:aws:s3:::${BUCKETNAME}
      FunctionName: !Ref MyLambdaFunction

  MyLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: SNSPublishPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action: "sns:Publish"
            Resource:
            - !Ref MySNSTopic
      Path: "/"
      Description: MyLambdaRole
      RoleName: MyLambdaRole
  
  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          import os
          import logging
          import boto3
          from urllib.request import Request, urlopen
          from urllib.error import URLError, HTTPError

          # set logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def lambda_handler(event, context):
              webhook_url = os.environ.get('Webhook')
              topic = os.environ.get('Topic')
              client = boto3.client('sns')
              bucket = event['Records'][0]['s3']['bucket']['name']
              object_name = event['Records'][0]['s3']['object']['key']
              object_size = event['Records'][0]['s3']['object']['size']
              
              text = (f"S3 Object creation notification mail\n"
                      f"Created object information as belows :\n\n"
                      f"Bucket : {bucket}\n"
                      f"Created Object : {object_ame}\n"
                      f"Size : {object_size}\n\n")
              response = client.publish(TargetArn=topic, Message=text)
              
              # If you want to add Webhook then, uncomment and use below code
              # You should uncomment environment variable of Lambda as well.
              # Then put your webhook URL in lambda environment variable
              #
              # teams_message = {
              #     "@context": "https://schema.org/extensions",
              #     "@type": "MessageCard",
              #     "themeColor": "64a837",
              #     "title": "S3 Object creation notification",
              #     "text": f"Object created as belows",
              #     "sections": [
              #         {
              #             "facts": [
              #                 {
              #                     "name": "Bucket",
              #                     "value": f"{bucket}"
              #                 },
              #                 {
              #                     "name": "Object name: ",
              #                     "value": f"{object_name}"
              #                 },
              #                 {
              #                     "name": "Object size: ",
              #                     "value": f"{object_size}"
              #                 }
              #             ]
              #         }
              #     ]
              # }
              # request = Request(webhook_url, json.dumps(teams_message).encode('utf-8'))
              # try:
              #     response = urlopen(request)
              #     response.read()
              #     logger.info("Message posted")
              # except HTTPError as err:
              #     logger.error(f"Request failed: {err.code} {err.reason}")
              # except URLError as err:
              #     logger.error(f"Server connection failed: {err.reason}")

      FunctionName: MyLambdaFunction
      Handler: index.lambda_handler
      Role: !GetAtt MyLambdaRole.Arn
      Runtime: python3.8
      Environment:
        Variables:
          Topic: !Ref MySNSTopic
          # Webhook: "YOUR-WEBHOOK-URL"
