# CloudFront Distribution, OAI, and S3 Bucket as origin. Bucket has Bucket Policy to allow OAI access for s3:GetObject
# Resources : CloudFront Distribution, CloudFront Origin Access Identity, S3 Bucket, S3 Bucket Policy and Route53 A(Alias) Record

AWSTemplateFormatVersion: 2010-09-09
Resources:
  # S3 Bucket
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: my-simple-s3-bucket

  # CloudFront OAI to access S3 bucket
  OAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: my-simple-s3-bucket S3 - CloudFront Origin Access Identity
  
  # S3 Bucket Policy which allows CloudFront OAI access
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Statement: 
        - Sid: "AllowOAIAccess"
          Action: 
          - "s3:GetObject"
          Effect: "Allow"
          Resource: 
          -  "arn:aws:s3:::my-simple-s3-bucket/*"
          Principal: 
            CanonicalUser: !GetAtt OAI.S3CanonicalUserId # Allow above created OAI to access this bucket
        # - Sid: "DenyNowAllowedAccess" If you want to deny all access except OAI to this bucket, use explicit deny rule
        #   Action: ["s3:GetObject", "s3:PutObject", "s3:DeleteObject", "s3:ListBucket"]
        #   Effect: "Deny"
        #   Resource:
        #   - "arn:aws:s3:::my-simple-s3-bucket/*"
        #   - "arn:aws:s3:::my-simple-s3-bucket"
        # # NotPrincipal:
        #   CanonicalUser: !GetAtt OAI.S3CanonicalUserId - Other principals will denied
        # Condition: - You can also exclude some other entities like IAM Role, IAM User
        #   ArnNotLike: - for example, excluding IAM role from deny rule
        #     "aws:PrincipalArn": 
        #     - "arn:aws:iam::YOUR-ACCOUNT-ID:role/SOME-IAM-ROLE"
        #  
        #  As a result, This Bucket will deny all accesses except OAI and IAM Role named "SOME-IAM-ROLE" 
        #
        # If you want to allow upload to bucket from some other source(ex. EC2 instance), You may set bucket policy for that purpose or configure IAM Policy and attach to user, role, group, ...)
        # - Sid: "AllowUpload"
        #   Action:
        #   - "s3:GetObject"
        #   - "s3:PutObject"
        #   - "s3:ListBucket"
        #   - "s3:DeleteObject"
        #   Effect: "Allow"
        #   Resource:
        #   - "arn:aws:s3:::my-simple-s3-bucket/*"
        #   - "arn:aws:s3:::my-simple-s3-bucket"
        #   Principal:
        #     AWS:
        #     - "SOME-IAM-ARN-TO-ALLOW-UPLOAD"
  
  # CloudFront distribution    
  CloudFront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig: # configure Distribution
        Aliases:
          - mydomain.example.com # Requests to 'mydomain.example.com will redirect to CloudFront'
        DefaultCacheBehavior: # Default Caching Behavior
          MinTTL: 0 # Minimum TTL of Cached object
          MaxTTL: 86400 # Maximum TTL of Cached object. (86400s == 24h)
          ViewerProtocolPolicy: allow-all # Allow both HTTP and HTTPS
          AllowedMethods: # HTTP Method type to allow
            - HEAD
            - GET
          CachedMethods: # HTTP Method type to cache
            - HEAD
            - GET
          TargetOriginId: my-simple-s3-bucket # Origin ID That CloudFront will access. It's S3 bucket here
          ForwardedValues: # If request to CloudFront has cookie value, custom header or QueryString, you can choose whether it to forward it to origin or not
            QueryString: false # Not forward query string to origin
          DefaultTTL: 86400 # 24 hours as Default TTL
          SmoothStreaming: false # Windows IIS specific attribute. If set true, it will support SmoothStreaming in Windows IIS
          Compress: true # Compress object
        DefaultRootObject: "" # Default Root Object
        Enabled: true # If true, distribution will enabled
        HttpVersion: http2 # client - cloudfront maximum HTTP Version
        IPV6Enabled: false # Not to handle ipv6
        Origins: # origin configuration
          - Id: my-simple-s3-bucket
            DomainName: my-simple-s3-bucket.s3.amazonaws.com # origin dns address
            OriginPath: ""
            S3OriginConfig: 
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${OAI}' # your OAI
        PriceClass: PriceClass_All # CloudFront Class - PriceClass_All will cache your object at every CloudFront Edge Location on earth
        ViewerCertificate:
          MinimumProtocolVersion: TLSv1 # Minimum TLS Version - Please refer to available TLSVersion name list
          SslSupportMethod: sni-only
          AcmCertificateArn: YOUR-ARN-OF-N.VIRGINIA-ACM-CERTIFICATE # HTTPS - Acm Certificate arn, must be in N.Virginia region. See https://docs.aws.amazon.com/acm/latest/userguide/acm-regions.html

  # route53 DNS A-ALIAS Record
  Route53DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties: 
      HostedZoneName: example.com. # example.com zone
      AliasTarget: 
        DNSName: !GetAtt CloudFront.DomainName # reqeusts to mydomain.example.com will go to CloudFront Domain address
        EvaluateTargetHealth: false 
        # It is mandatory to set HostedZoneId as Z2FDTNDATAQYW2 for alias record that routes traffic to a CloudFront distribution.(https://docs.aws.amazon.com/ko_kr/AWSCloudFormation/latest/UserGuide/aws-properties-route53-aliastarget.html)
        HostedZoneId: Z2FDTNDATAQYW2
      Type: A
      Name: mydomain.example.com.
